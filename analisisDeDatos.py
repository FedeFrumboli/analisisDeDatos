# -*- coding: utf-8 -*-
"""Clase3_LUMCA_analisisDeDatos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WPnUe6CquvS5MzZx5cVtr8z78cmRARqc
"""

# Datos de nuestra cuenta de drive
from google.colab import drive

drive.mount('/drive/')

#Pandas
import pandas as pd

turnos = pd.read_csv("/drive/MyDrive/Datos_Para_Clases/dataset_turnos_detalle.csv")

turnos

turnos.columns

turnos.rename(columns = {'fecha_cita':'fecha'}, inplace=True)

turnos['sede']

turnos['sede'].value_counts().head(5)

turnos['sede'].value_counts(normalize = True).head(5) * 100

#_______________________________________________________________________________
# comando LOC (filtrar por filas y columnas)
# 1er paso, definir un nuevo indice (alguna de las columnas)
turnos.set_index('genero', inplace = True)

turnos

# 2do paso, elijo fila (para filtrar)
turnos.loc['MASCULINO']

#_______________________________
# Defino un nuevo indice
# (para definir un nuevo indice, primero hay que resetear el index de turnos)
turnos.reset_index(inplace = True)

turnos

# Ahora si, defino un nuevo indice, en este caso 'sede'
turnos.set_index('sede', inplace = True)

turnos

# Muestro solo registros con sede centro de recoleta
turnos.loc['Centro C. Recoleta']

# Filtro por varios registros
turnos.loc[['Centro C. Recoleta', 'La Rural', 'Centro de Dia N9 y 13']].sample(10)

turnos.reset_index(inplace = True)

# Todas las sedes menos una
turnos.loc[turnos.sede != "La Rural"]

turnos.reset_index(inplace = True)

# Ahora si, defino un nuevo indice, en este caso 'sede'
turnos.set_index('sede', inplace = True)

# Filtro por varios registros y columnas
turnos.loc[['Centro C. Recoleta', 'La Rural'], 'genero']

turnos.loc[['Centro C. Recoleta', 'La Rural'], ['genero']]

#_____________filtro filas______________________filtro columnas____
turnos.loc[['Centro C. Recoleta', 'La Rural'], ['genero','fecha']]

# Muestro todas las filas y filtro columnas
turnos.loc[:, ['genero','fecha']]

# Filtro filas y muestro todas las columnas
turnos.loc[['La Rural'], :]

# Filtro filas y muestro columnas desde servicio a la derecha
turnos.loc[['La Rural'], 'servicio':]

# Vuelvo a resetear indice
turnos.reset_index(inplace = True)

turnos

#______________________________________________________________
# Comando groupby
turnos.groupby(['sede']).size()

turnos.groupby(['sede']).size().sort_values(ascending=False)

turnos.groupby(['sede','genero']).size()

turnos.groupby(['genero','sede','servicio']).size()

#______________________________________________________________
# Comando ILOC (filtro por indices)
# Posicion de filas y posicion de columnas
turnos.iloc[10:16, 1:3]

#_______________________________________________________________________________
# GRAFICOS
import numpy as np
import matplotlib.pyplot as plt

datos_subte = pd.read_csv("/drive/MyDrive/Datos_Para_Clases/subte_trx_promedio_por_estacion_dia_hora.csv")

datos_subte

datos_subte.plot()

# 1ro: Le doy un nombre a la figura (se llama figura)
# Está compuesta por 2 graficos en un renglon (nrows) dividido en 2 columnas (ncols)
figura, (grafico1, grafico2) = plt.subplots(nrows=1, ncols=2)
# 2do: Agrego contenido a los graficos
grafico1.boxplot(datos_subte.trx_totales, showfliers = False)
datos_subte.trx_totales.plot(kind = 'kde', ax=grafico2)

# Declaro titulo y subtitulo
figura.suptitle("Grafico 1 del curso")

grafico1.set_title("Gráfico 1")
grafico2.set_title("Gráfico 2")

# Elimino bordes de los graficos:
grafico1.spines['top'].set_visible(False)
grafico1.spines['bottom'].set_visible(False)
grafico1.spines['left'].set_visible(False)
grafico1.spines['right'].set_visible(True)

# Agrego leyendas horizontales y verticales
grafico1.set_ylabel("Cantidad de usuarios")


; 
#Con el punto y coma limpio informacion que sale en la pantalla, arriba del grafico

# Datos estadisticos generales (toma los valores numericos de la tabla)
datos_subte.describe()

estadisticos = datos_subte.trx_totales.describe()

estadisticos

figura, (g11) = plt.subplots(nrows=1, ncols=1, figsize=(10,10))

datos_subte.trx_totales.plot(kind='kde', ax=g11, legend=None)

#Titulo eje x
g11.set_xlabel('Densidad de viajes')

#Saco Bordes
g11.spines['top'].set_visible(False)
g11.spines['bottom'].set_visible(False)
g11.spines['left'].set_visible(False)
g11.spines['right'].set_visible(False)

#Modifico escala
g11.set_xlim(0,20000)

# Grafico diferentes valores
promedio = g11.axvline(estadisticos['mean'], linestyle='--', color='red', linewidth=1)
mediana = g11.axvline(estadisticos['50%'], linestyle=':', color='green', linewidth=3)
g11.legend((promedio, mediana), ('Promedio','Mediana'))

;

# Cuento los viajes en dias de semana (saco la media)
datos_subte.groupby('dia_de_semana').size()

datosPorDiaHabil = datos_subte.groupby('dia_de_semana').mean()

datosPorDiaHabil

datosPorDiaHabil.plot(kind='bar')

# SEABORN - Otra forma de graficar
import seaborn as sns
sns.set_theme(style="ticks") #Elijo colores

# Elijo lo que va en los ejes, y de donde saco los datos
sns.barplot(x='trx_totales', y='linea', data=datos_subte)
;

#Otro ejemplo
fig,ax = plt.subplots(figsize=(8,6))
sns.barplot(x='trx_totales', y='linea', data=datos_subte, ax=ax, estimator=np.median);
ax.set_xlabel(u'Viajes por estacion')
ax.set_ylabel(u'Linea')

ax.set_title(u'Viajes promedio por estacion de subte', fontdict={'fontsize':18})

ax.spines['top'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['right'].set_visible(False)

# Metodologia para graficar
# 1: separar/ agrupar datos que se quieran analizar
# 2: graficar esos datos
